0 outline
(1) Operator overloading
(2) Friend functions
(3) Overloading the << operator for output
(4) State members
(5) Using rand() to generate random values
(6) Automatic conversions and type casts for classes
(7) Class conversion functions

1 Operator Overloading
Time Time::operator+(const Time & t) const
{
    Time sum;
    sum.minutes = minutes + t.minutes;
    sum.hours = hours + t.hours + sum.minutes / 60;
    sum.minutes %= 60;
    return sum;
}
you can invoke the operator+() method by using the same syntax that Sum() uses:
total = coding.operator+(fixing); // function notation
But naming the method operator+() also lets you use operator notation:
total = coding + fixing; // operator notation
Either notation invokes the operator+() method. Note that with the operator notation,
the object to the left of the operator (coding, in this case) is the invoking object,and
the object to the right (fixing, in this case) is the one passed as an argument. 
Can you add more than two objects? For example, if t1, t2, t3,and t4 are all Time
objects, can you do the following?
t4 = t1 + t2 + t3; // valid?
The way to answer this is to consider how the statement gets translated into function
calls. Because addition is a left-to-right operator, the statement is first translated to this:
t4 = t1.operator+(t2 + t3); // valid?
Then the function argument is itself translated to a function call, giving the following:
t4 = t1.operator+(t2.operator+(t3)); // valid? YES
Is this valid? Yes, it is.The function call t2.operator+(t3) returns a Time object that
represents the sum of t2 and t3.This object then becomes the object of the
t1.operator+() function call,and that call returns the sum of t1 and the Time object
that represents the sum of t2 and t3. In short, the final return value is the sum of t1, t2,
and t3, just as desired.

Overloading Restrictions
Overloaded operators (with some exceptions) don’t necessarily have to be member functions. 
However,at least one of the operands has to be a user-defined type.

the limits C++ imposes on user-defined operator overloading:
a.The overloaded operator must have at least one operand that is a user-defined type.
  This prevents you from overloading operators for the standard types.
  Thus, you can’t redefine the minus operator (-) so that it yields the sum of two double values instead of their difference.
  This restriction preserves program sanity,although it may hinder creative accounting.
b.You can’t use an operator in a manner that violates the syntax rules for the original
  operator.
  
2. Introducing Friends
As you’ve seen, C++ controls access to the private portions of a class object.  
Usually, public class methods serve as the only access, but sometimes this restriction is too rigid to fit particular programming problems. 
In such cases, C++ provides another form of access: the friend. Friends come in three varieties:
a. Friend functions
b. Friend classes
c. Friend member functions

A Common Kind of Friend: Overloading the << Operator
The First Version of Overloading <<
To teach the Time class to use cout, you can use a friend function.
Why? Because a statement like the following uses two objects, with the ostream class object (cout) first:
cout << trip;

If you use a Time member function to overload <<, the Time object would come first,
as it did when you overloaded the * operator with a member function.
That means you would have to use the << operator this way:
trip << cout; // if operator<<() were a Time member function
This would be confusing. But by using a friend function, you can overload the operator this way:
void operator<<(ostream & os, const Time & t)
{
    os << t.hours << " hours, " << t.minutes << " minutes";
}
This lets you use
cout << trip;
to print data in the following format:
4 hours, 23 minutes

Friend or No Friend?
The new Time class declaration makes the operator<<() function a friend function to the
Time class. But this function, although not inimical to the ostream class, is not a friend to
that class. The operator<<() function takes an ostream argument and a Time argument,
so it might seem that this function has to be a friend to both classes. If you look at the code
for the function, however, you’ll notice that the function accesses individual members of the
Time object but only uses the ostream object as a whole. Because operator<<()
accesses private Time object members directly, it has to be a friend to the Time class. But
because it does not directly access private ostream object members, the function does not
have to be a friend to the ostream class. That’s nice because it means you don’t have to
tinker with the ostream definition.

C++ reads the output statement from left to right, meaning it is equivalent to the
following:
(cout << x) << y;
The << operator,as defined in iostream, takes an ostream object to its left. Clearly, the
expression cout << x satisfies that requirement because cout is an ostream object.


Tip
In general, to overload the << operator to display an object of class c_name, you use a
friend function with a definition in this form:
ostream & operator<<(ostream & os, const c_name & obj)
{
os << ... ; // display object contents
return os;
}

#include <iostream>
class comp
{
private:
	double real;
	double image;
public:
	comp(double ireal, double iimage);
	comp operator+(const comp & comp1);
	friend std::ostream & operator<<(std::ostream & os, const comp & t);
};


int main()
{
	comp a = comp(1, 1);
	comp b = comp(2, 3);
	comp c = a + b;
	std::cout << c;
	return 0;
}

comp::comp(double ireal, double iimage)
{
	real = ireal;
	image = iimage;
}
comp comp::operator+(const comp & comp1)
{
	comp sum(0, 0);
	sum.real = this->real + comp1.real;
	sum.image = this->image + comp1.image;
	return sum;
}

std::ostream & operator<<(std::ostream & os, const comp & t)
{
	os << t.real << " + " << t.image << std::endl;
	return os;
}




