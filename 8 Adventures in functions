1 outline
(1) inline function
(2) reference variables
(3) pass function arguments by reference
(4) default arguments
(5) function overloading
(6) function templates

C++ provides many new function features that separate C++ from its C heritage.
The new features include inline functions, by reference variable passing, default argument values, function overloading and template functions.

2 C++ inline function
inline functions are a c++ enhancement designed to speed up programs.
difference between noraml fun and inline function: how the C++ compiler incorporates them into a program.
*** The final product of the compilation process is an executable program, which consists of a set of machine language instructions.
*** Normal function calls involve having a program jump to another address (the function address) and then jump back when the fun terninates.
memory penalty:
the compiler replace the function call with the corresponding function code.

*** recursion is not allowed or indeed possible for inline functions.
*** Inline versus macros
The inline facility is an addition to C++. C uses the preprocessor #define statement to provide macros, which are crude implementations of inline code.
#define SQUARE(X) X*X
this works not by passing arguments but through text substitution.

3 Reference Variables
A reference is  a name that acts as an alias, or an alternative name, for a previously defined variable.
The main use for a reference variable is a formal argument to a function.
If you use a reference as an argument, the function works wih the original data instead of with a copy.
references provide a convenient alternative to pointersfor processing large structures with functions, and they are essential for designing calsses.

int juice;
int & beverage = juice; // & is not the address operator. instead, it serves as part of the type identifier.
char * in a declaration means pointer-to-char, int & means reference-to-int.
the reference declaration allows you to use juice and beverage interchangeably; both refer to the same value and the same memory location.

*** you should initialize a reference variable when you declare it.
you can not declare the reference and then assign it a value later the way you can with a pointer:
	int juice;
	int & beverage;
	beverage = juice;
 
initializing beverage to *pt makes beverage refer to juice.
  int juice = 10;
  int * pt = &juice;
  int & beverage = *pt;
  cout << "*pt = " << *pt << "beverage = " << beverage;	
  
passing by reference
#include <iostream>

void swap(int * a, int * b); // the argument should be an address
void swap(int & a, int & b);
int main() {
	using namespace std;

	int orange = 10;
	int * op = &orange;
	int apple = 9;
	int * ap = &apple;
	cout << "orange = " << orange << endl;
	cout << "apple = " << apple << endl;

	cout << "swap by passing reference" << endl;
	swap(orange, apple);
	cout << "orange = " << orange << endl;
	cout << "apple = " << apple << endl;

	cout << "swap by passing pointers" << endl;
	swap(op, ap); // swap(&orange, &apple);
	cout << "orange = " << orange << endl;
	cout << "apple = " << apple << endl;

	return 0;
}

void swap(int *a, int *b)
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}

void swap(int & a, int & b)
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}

reference properties and oddities (skip)

*** reference were introduced primarily for use with structures and classes.
double m = sqrt(16.0); 
cout << sqrt(25.0); 
In the first statement, the value 4.0 is copied to a temporary location and then the value in that location is copied to m.
In the second statement,the value 5.0 is copied to a temporary location, then the contents of that location are passed on to cout.
Now consider this statement: 
dup = accumulate(team,five); 
If accumulate() returned a structure instead of a reference to a structure, 
this could involve copying the entire structure to a temporary location and then copying that copy to dup.
But with a reference return value, team is copied directly to  dup, a more efficient approach. 

Note 
A function that returns a reference is actually an alias for the referred-to variable. 
Being Careful About What a Return Reference Refers To 
*** remember when returning a reference is to avoid returning a reference to a memory location that ceases to exist when the function terminates.
What you want to avoid is code along these lines: 
const free_throws & clone2(free_throws & ft) 
{ 
	free_throws newguy;  // first step to big error 
	newguy = ft;         // copy info 
	return newguy;       // return reference to copy 
}


The simplest way to avoid this problem is to return a reference that was passed as an argument to the function.
A reference parameter will refer to data used by the calling function; hence, the returned reference will refer to that same data.

A second method is to use new to create new storage.
You’ve already seen examples in which new creates space for a string and the function returns a pointer to that space.
Here’s how you could do something similar with a reference: 
const free_throws & clone(free_throws & ft) 
{ 
	free_throws * pt; 
	*pt = ft;          // copy info 
	return *pt;        // return reference to copy 
} 
The first statement creates a nameless  free_throws structure.
The pointer  pt points to the structure, so  *pt is the structure.
The code appears to return the structure, but  the function declaration indicates that the function really returns a reference to this structure. 
You  could  then  use  the  function  this  way: 
free_throws & jolly = clone(three); 
This makes  jolly a reference to the new structure.
problem: may forget to delete().

Why Use const with a Reference return?
Suppose you want to use a reference return value but don’t want to permit behavior such as assigning a value to  accumulate(). 
Just  make  the  return  type  a  const reference: const free_throws & accumulate(free_throws & target, const free_throws & source); 
The return type now is  const, hence a nonmodifiable lvalue.
Therefore, the assignment no longer is allowed: 
accumulate(dup,five) = four;  // not allowed for const reference return

using reference with a calss object
Passing  a  C-Style  String  Argument  to  a  string Object Reference Parameter 
You  may  have  noticed  a  rather  interesting  fact  about  the  version1() function: 
Both formal parameters (s1 and s2) are type  const string &, 
but the actual arguments (input and "***") are type  string and const char *, respectively. 
Because  input is type  string, there is no problem having  s1 refer to it. 
But how is it that the program accepts passing a pointer-to-char argument to a  string reference? 
Two  things  are  going  on  here.  
One  is  that  the  string class defines a  char *-to-string conversion, 
which makes it possible to initialize a  string object to a C-style string. 
The second is a property of  const reference formal parameters that is discussed earlier in this chapter. 
Suppose the actual argument type doesn’t match the reference parameter type but can be converted to the reference type. 
Then the program creates a temporary variable of the correct type, initializes it to the converted value, 
and passes a reference to the temporary variable. 
Earlier this chapter you saw, for instance, that a  const double & parameter can handle an  int argument in this fashion. 
Similarly, a  const string & parameter can handle a  char * or const char * argument in this fashion. 
The convenient outcome of this is that if the formal parameter is type  const string &, 
the actual argument used in the function call can be a  string object or a C-style string, 
such as a quoted string literal, a null-terminated array of  char, or a pointer variable that points to a char. 
Hence the following works fine: result = version1(input, "***");

The setf() method allows you to set various formatting states. 
For  example, the method call  setf(ios_base::fixed) places an object in the mode of using fixed decimal-point notation.
The call  setf(ios_base:showpoint) places an object in the mode of showing a trailing decimal point, 
even  if  the  following  digits  are  zeros.
The  precision() method indicates the number of figures to be shown to the right of the decimal.
All these settings stay in place unless they’re reset by another method call.
The  width() call sets the field width to be used for the next output action.
This setting holds for displaying one value  only, and then it reverts to the default. 
(The default is a field width of zero, which is then expanded to just fit the actual quantity being displayed.) 
The file_it() function uses an interesting pair of method calls: 
ios_base::fmtflags initial; 
initial = os.setf(ios_base::fixed); // save initial formatting state 
... 
os.setf(initial);   // restore initial formatting state 

The setf() method returns a copy of all the formatting settings in effect before the call was made. 
ios_base::fmtflags is a fancy name for the type needed to store this information. 
So the assignment to  initial stores the settings that were in place before the file_it() function was called.
The  initial variable  can  then  be  used  as  an  argument to  setf() to reset all the formatting settings to this original value.
Thus, the function restores the object to the state it had before being passed to  file_it(). 
Knowing more about classes will help you understand better how these methods work and, why,for example, ios_base keeps  popping  up. 
But you don’t have to wait until Chapter 17 to use these methods. 
One final point: Each object stores its own formatting settings. 
So when the program passes cout to file_it(),cout’s  settings  are  altered  and  then  restored.
When  the program passes  fout to file_it(),fout’s  settings  are  altered  and  then  restored.

When to Use Reference Arguments 
There are two main reasons  for  using  reference  arguments: 
(1) To  allow  you  to  alter  a  data  object  in  the  calling  function 
(2) To  speed  up  a  program  by  passing  a  reference  instead  of  an  entire  data  object 
The second reason is most important for larger data objects, such as structures and class objects.
These two reasons are the same reasons you might have for using a pointer argument.
This makes sense because reference arguments are really just a different interface forpointer-based code. 

So when should you use a reference? Use a pointer? Pass by value? The following are some guidelines. 
(1) A function uses passed data without modifying it: 
a. If the data object is small, such as a built-in data type or a small structure, pass it by value. 
b. If the data object is an array, use a pointer because that’s your only choice. Make the pointer a pointer to  const. 
c. If the data object is a good-sized structure, use a  const pointer or a  const reference to increase program efficiency.
   You save the time and space needed to copy a structure or a class design. Make the pointer or reference  const. 
d. If the data object is a class object, use a  const reference.
   The  semantics  of  class design often require using a reference, which is the main reason C++ added this feature.
   Thus, the standard way to pass class object arguments is by reference. 
   
(2) A function modifies data in the calling function: 
a. If the data object is a built-in data type, use a pointer. 
   If you spot code like fixit(&x),where  x is an  int, it’s pretty clear that this function intends to modify  x. 
b. If the data object is an array, use your only choice: a pointer. 
c. If the data object is a structure, use a reference or a pointer. 
d. If the data object is a class object, use a reference. 
Of course, these are just guidelines, and there might be reasons for making different choices. 
For  example, cin uses references for basic types so that you can use  cin >> n instead of  cin >> &n.

4 default arguments
How do you establish a default value? You must use the function prototype.
Because the compiler looks at the prototype to see how many arguments a function uses.
When you use a function with an argument list, you must add defaults from right to left.
That is, you can not provide a default value for a particular argument unless you also provide defaults for all the arguments to its right.
Default arguments aren’t a major programming breakthrough; rather, they are a convenience.
When you begin working with class design, you’ll find that they can reduce the number of constructors, methods,and method overloads you have to define.

#include <iostream>
#include <cstring>
const int ArSize = 80;
char * left(const char * str, int n = 1);

int main() {
	using namespace std;
	char sample[ArSize];
	cin.getline(sample, ArSize);
	cout << "default: " << left(sample) << endl;
	cout << "the first 6: " << left(sample, 6) << endl;

	return 0;
}

char * left(const char * str, int n)
{
	char * r_str = new char[strlen(str)];
	for (int i = 0; i < strlen(str); i++)
	{
		r_str[i] = str[i];
	}

	if (strlen(str) < n)
		return r_str;
	else
	{
		*(r_str + n) = '\0';
		return r_str;
	}
}
Another approach for setting the size of the new string is to set  n to the smaller of the passed value and the string length: 
int len = strlen(str); 
n = (n < len) ? n : len;    // the lesser of n and len 
char * p = new char[n+1]; 
This ensures that  new doesn’t allocate more space than what’s needed to hold the string.
That can be useful if you make a call such as  left("Hi!", 32767).

But by adding another function call (strlen()), it increases the program size, slows the process, 
and requires that you remember to include the  cstring (or string.h) header file. 
C programmers have tended to opt for faster running, more compact code and leave a greater burden on the programmer to use functions correctly. 
However, the C++ tradition places greater weight on reliability.
After all, a slower program that works correctly  is  better  than  a  fast  program  that  works  incorrectly. 
If the time taken to call strlen() turns out to be a problem, you  can  let  left() determine the lesser of n and the string length directly. 
For  example, the following loop quits when  m reaches  n or the end of the string, whichever comes first: 
int m = 0; 
while (m <= n && str[m] != '\0') 
	m++; 
char * p = new char[m+1]: // use m instead of n in rest of code 
the  while test also can be written this way:
while (m<=n && str[m])

5 function overloading
Whereas default arguments let you call the same function by using varying numbers of arguments, 
function polymorphism, also called  function overloading, lets you use multiple functions sharing the same name.
The word polymorphism means having many forms, so function polymorphism lets a function have many forms. 
Similarly, the expression  function overloading means you can attach more than one function to the same name, thus overloading the name.

The key to function overloading is a function’s argument list, also called the function signature. 
If two functions use the same number and types of arguments in the same order, they have the same signature;the variable names don’t matter. 
C++ enables you to define two functions by the same name, provided that the functions have different signatures.
The signature can differ in the number of arguments or in the type of arguments, or both.
Faced with this ambiguous situation, C++ rejects the function call as an error.


Some signatures that appear to be different from each other nonetheless can’t coexist. 
For  example, consider these two prototypes: 
double cube(double x); 
double cube(double & x);
You  might  think  this  is  a  place  you  could  use  function  overloading  because  the  function signatures appear to be different. 
But consider things from the compiler’s standpoint. 
Suppose you have code like this: 
cout << cube(x); The x argument matches both the  double x prototype and the  double &x prototype. 
The compiler has no way of knowing which function to use.
Therefore, to avoid such confusion, when it checks function signatures, the compiler considers a reference to a type and the type itself to be the same signature. 

The function-matching process does discriminate between  const and non-const variables.
Consider the following prototypes: 
void dribble(char * bits);          // overloaded 
void dribble (const char *cbits);   // overloaded 
void dabble(char * bits);           // not overloaded 
void drivel(const char * bits);     // not overloaded 
Here’s what various function calls would match: 
const char p1[20] = "How's the weather?"; 
char p2[20] = "How's business?"; 
dribble(p1);      // dribble(const char *); 
dribble(p2);      // dribble(char *); 
dabble(p1);       // no match 
dabble(p2);       // dabble(char *); 
drivel(p1);       // drivel(const char *); 
drivel(p2);       // drivel(const char *); 
The dribble() function has two prototypes—one for  const pointers and one for regular pointers—and the compiler selects one or the other, 
depending on whether the actual argument is  const.
The  dabble() function only matches a call with a non-const argument,but  the  drivel() function matches calls with either  const or non-const arguments.
The reason for this difference in behavior between  drivel() and dabble() is that it’s valid to assign a non-const value  to  a  const variable,but  not  vice  versa. 

Keep  in  mind  that  the  signature, not the function type, enables function overloading. 

What Is Name Decoration? How does C++ keep track of which overloaded function is which? 
It assigns a secret identity to each of these functions.
When you use the editor of your C++ development tool to write and compile programs, 
your C++ compiler performs a bit of magic on your behalf—known as name decoration or name mangling—through which each function name is encrypted, 
based on the formal parameter types specified in the function’s prototype. 
Consider the following undecorated function prototype: 
long MyFunctionFoo(int, float); 
This format is fine for us humans; 
we know that the function accepts two arguments of type int and float, and it returns a value of type  long. 
For its own use, the compiler documents this interface by transforming the name into an internal representation with a more unsightly appearance, 
perhaps something like this: 
?MyFunctionFoo@@YAXH 
The apparent gibberish decorating the original name (or mangling it, depending on your attitude) encodes the number and types of parameters. 







