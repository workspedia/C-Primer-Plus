0 outline
(1) Separate compilation of programs 
(2) Storage duration, scope, and linkage 
(3) Placement new 
(4) Namespaces 
C++ offers many choices for storing data in memory.
You have choices for how long data remains in memory (storage duration) and choices for which parts of a program have access to data (scope and linkage).
You can allocate memory dynamically by using  new, and placement  new offers a variation on that technique.
The C++ namespace facility provides additional control over access. 
Larger programs typically consist of several source code files that may share some data in common. 
Such programs involve the separate compilation of the program files, and this chapter begins with that topic.

1 Separate Compilation 
you  can compile the files separately and then link them into the final executable program. 
If you modify just one file, you  can  recompile  just  that  one  file  and  then  link  it  to  the  previously compiled versions of the other files.

Instead of placing the structure declarations in each file, you  can  place  them  in  a  header  file  and  then  include  that  header  file  in each source code file.
Also you can place the function prototypes in the header file. 
Thus,you  can  divide  the  original  program  into  three  parts:
a. A header file that contains the structure declarations and prototypes for functions that use those structures 
b. A source code file that contains the code for the structure-related functions 
c. A source code file that contains the code that calls the structure-related functions

*** One file, the header file, contains the definition of the user-defined types.
*** A second file contains the function code for manipulating the user-defined types.
*** Together, they form a package you can use for a variety of programs.
You  shouldn’t  put  function  definitions  or  var iable  declarations  into  a  header  file. (multiple definitions)

Here are some things commonly found in header files:
a. Function prototypes 
b. Symbolic constants defined using  #define or const 
c. Structure declarations 
d. Class declarations
e. Template  declarations 
f. Inline functions 
It’s okay to put structure declarations in a header file because they don’t create variables; 
they just tell the compiler how to create a structure variable when you declare one in a source code file. 
Similarly, template declarations aren’t code to be compiled; they are instructions to the compiler on how to generate function definitions to match function calls found in the source code. 
Data declared  const and inline functions have special linkage properties that allow them to be placed in header files without causing problems. 

If the filename is enclosed in angle brackets, the C++ compiler looks at the part of the host system’s file system that holds the standard header files. 
But if the filename is enclosed in double quotation marks, the compiler first looks at the current working directory or at the source code directory (or some such choice, depending on the compiler). 
If it doesn’t find the header file there, it then looks in the standard location. 
So you should use quotation marks, not angle brackets, when including your own header files. 

Note that you only add source code files, not header files, to projects.
That’s because the #include directive manages the header files. 
Also you shouldn’t use #include to include source code files because that can lead to multiple declarations.

Caution 
In IDEs, don’t add header files to the project list and don’t use  #include to include source code files in other source code files

Compiling a multifile C++ program on a Unix system
a. Give UNIX compile command for two source files: 
   CC file1.cpp file2.ccp //source files
b. Preprocessor combines included files with source code: //temp1.cpp temporary files
c. Compiler creates an object code     // file1.o object code file
d. Linker combines object code files with library code and startup code to produce executable file: a.out

Header File Management 
You  should  include  a  header  file  just  once  in  a  file.  
That  might  seem  to  be  an  easy  thing  to remember, but it’s possible to include a header file several times without knowing you did so.
For example, you might use a header file that includes another header file. 

There’s a standard C/C++ technique for avoiding multiple inclusions of header files. 
It’s based on the preprocessor
#ifndef (for if not defined) directive. 
A code segment like the following means “process the statements between the  
#ifndef and #endif 
only if the name COORDIN_H_ has not been defined previously by the preprocessor  #define directive”: 
#ifndef COORDIN_H_ 
... 
#endif 
Normally, you use the  #define statement to create symbolic constants, as in the following: 
#define MAXIMUM 4096 
But simply using  #define with a name is enough to establish that a name is defined, as in the following:
#define COORDIN_H_  // with a few underscore characters tossed in to create a name that is unlikely to be defined elsewhere.

Note that this method doesn’t keep the compiler from including a file twice. 
Instead, it makes the compiler ignore the contents of all but the first inclusion.
Most of the standard C and C++ header files use this guarding scheme. 
Otherwise you might get the same structure defined twice in one file, and that will produce a compile error.

By the way, although we’ve discussed separate compilation in terms of files, the C++ Standard uses the term  translation unit instead of  file in order to preserve greater generality; 
the file metaphor is not the only possible way to organize information for a computer. 
For simplicity, this book will use the term  file, but  feel  free  to  translate  that  to  translation unit. 

Multiple Library Linking The C++ Standard allows each compiler designer the latitude to implement name decoration or mangling as it sees fit, 
so you should be aware that binary modules (object-code files) created with different compilers will, most likely, not link properly. 
That is, the two compilers will generate different decorated names for the same function. 
This name difference will prevent the linker from matching the function call generated by one compiler with the function definition generated by a second compiler. 
When attempting to link compiled modules, you should make sure that each object file or library was generated with the same compiler. 

***If you are provided with the source code, you can usually resolve link errors by recompiling the source with your compiler.

2 Storage Duration, Scope, and Linkage 
storage categories affect how information can be shared across files. 
C++ uses three separate schemes (four under C++11) for storing data, and the schemes differ in how long they preserve data in memory: 
a. Automatic  storage  duration
   Variables declared inside a function definition— including function parameters—have automatic storage duration.
   
b. Static storage duration
   Variables defined outside a function definition or else by  using  the  keyword  static have static storage duration.
   They persist for the entire time a program is running. 
   C++ has three kinds of static storage duration variables.
   
c. Thread storage duration (C++11)—These days multicore processors are common.
   These are CPUs that can handle several execution tasks simultaneously.

d. Dynamic storage duration
   Memory allocated by the new operator persists until it is freed with the delete operator or until the program ends, whichever comes first.
   This memory has dynamic storage duration and sometimes is termed the free store  or the  heap.  
   
Scope and Linkage 
Scope describes how widely visible a name is in a file (translation unit).
Linkage describes how a name can be shared in different units.
A name with external linkage can be shared across files, and a name with internal linkage can be shared by functions within a single file. 
Names of automatic variables have no linkage because they are not shared. 

A C++ variable can have one of several scopes.
A variable that has  local scope (also termed  block  scope) is known only within the block in which it is defined. 
Recall that a block  is  a  series  of  statements  enclosed  in  braces.
A  function  body, for example,is a block, but  you  can  have  other  blocks  nested  within  the  function  body.
A  variable  that  has  global scope (also termed  file scope) is known throughout the file after the point where it is defined.

Automatic variables have local scope, and a static variable can have either scope, depending on how it is defined. 
Names used in a  function prototype scope are known just within the parentheses enclosing the argument list. 

Members declared in a class have  class  scope.
Variables declared in a namespace have  namespace scope.

C++ functions can have class scope or namespace scope, including global scope, but they can’t have local scope.
The various C++ storage choices are characterized by their storage duration, their scope, and their linkage. 

(1) Automatic Storage Duration 
Function parameters and variables declared inside a function have, by  default, automatic storage duration.
They also have local scope and no linkage. 

*** Note that the variable is allocated when execution enters the block, but the scope begins only after the point of declaration.

Automatic Variables and the Stack 
Because the number of automatic variables grows and shrinks as functions start and terminate, the program has to manage automatic variables as it runs.
The usual means is to set aside a section of memory and treat it as a stack for managing the flow and ebb of variables. 
The program keeps track of the stack by using two pointers. 
One points to the base of the stack, where the memory set aside for the stack begins, and one points to the top of the stack, which is the next free memory location.
When a function is called, its automatic variables are added to the stack, and the pointer to the top points to the next available  free  space  following  the  variables.
When  the function terminates, the top pointer is reset to the value it had before the function was called, effectively freeing the memory that had been used for the new variables. 

Register Variables 
C originally introduced the  register keyword  to  suggest  that  the  compiler  use  a  CPU register  to  store  an  automatic  variable: 
register int count_fast;  // request for a register variable 
The idea was that this would allow faster access to the variable. 

(2) Static Duration Variables 
C++,like C,provides static storage duration variables with three kinds of linkage: 
external linkage (accessible across files), internal linkage (accessible to functions within a single file), and no linkage (accessible to just one function or to one block within a function).
All three last for the duration of the program; they are less ephemeral than automatic variables. 

Because the number of static variables doesn’t change as the program runs, the program  doesn’t  need  a  special  device  such  as  a  stack  to  manage  them.
Instead,the compiler allocates a fixed block of memory to hold all the static variables, and those variables stay present as long as the program executes.
Also if you don’t explicitly initialize a static variable, the compiler sets it to  0. 
Static arrays and structures have all the bits of each element or member set to  0 by  default.


To create a static duration variable with external linkage, you declare it outside any block.
To  create  a static  duration  variable  with  internal linkage, you declare it outside any block and use the static storage class modifier.
To create a static duration variable with no linkage, you  declare  it  inside  a  block, using the static modifier.

The following code fragment shows these three variations: 
... 
int global = 1000;           // static duration, external linkage 
static int one_file = 50;    // static duration, internal linkage 
int main() 
{
   ... 
} 
void funct1(int n) 
{ 
   static int count = 0;  // static duration, no linkage 
   int llama = 0; 
   ... 
} 

Table   The Five Kinds of Variable Storage 
Storage Description              Duration    Scope    Linkage     How Declared     
Automatic                        Automatic   Block    None        In a block
Register                         Automatic   Block    None        In a block with the keyword register
Static with no linkage           Static      Block    None        In a block with the keyword static
Static with external linkage     Static      File     External    Outside all functions
Static with internal linkage     Static      File     Internal    Outside all functions with the keyword  static

When used with a local declaration to indicate a static variable with no linkage, static indicates the kind of storage duration.
When used with a declaration outside of a block, static indicates internal linkage; the variable already has static duration. 
One might term this  keyword overloading, with the precise meaning determined by context.

Zero-initialization and constant-expression initialization collectively are called  static initialization.
This  means  the  variable  is  initialized  when  the  compiler  processes  the  file  (or translation unit).
Dynamic initialization means the variable is initialized later. 
So what determines which form of initialization takes place? 
First of all, all static variables are zero-initialized, whether or not any initialization is indicated. 
Next, if the variable is initialized using a constant expression that the compiler can evaluate solely from the file contents (including included header files), 
it can perform constant-expression initialization.
The compiler is prepared to do simple calculations if needed. 
If there’s not enough information at this time, the variable will be dynamically initialized.
Consider the following: 
#include <cmath> 
int x;                              // zero-initialization 
int y = 5;                          // constant-expression initialization 
long z = 13 * 13;                   // constant-expression initialization 
const double pi = 4.0 * atan(1.0);  // dynamic initialization 
First, x, y, z, and  pi are zero-initialized.
Then the compiler evaluates the constant expressions and initializes  y and z to 5 and 169, respectively. 
But initializing  pi requires calling the  atan() function, and this has to wait until the function is linked and the program  executes. 
A constant expression is not limited to arithmetic expressions using literal constants. 
It can, for example, use the  sizeof operator: 
int enough = 2 * sizeof (long) + 1;  // constant expression initialization 

Static Duration, External Linkage 
Variables  with  external  linkage  are  often simply called  external variables.
They  necessarily have static storage duration and file scope. 
External variables are defined outside, and hence external to, any function. 
For  example, they could be declared above the  main() function or in a header file.
You can use an external variable in any function that follows the external variable’s definition in the file.
Thus, external variables are also termed  global variables, in contrast to automatic variables, which are local variables. 

The One Definition Rule 
On the one hand, an external variable has to be declared in each file that uses the variable. 
On the other hand, C++ has the  “one definition rule” , which states that there can be only one definition of a variable.
To satisfy these requirements, C++ has two kinds of variable declarations.
One is the  defining declaration or, simply, a  definition.
It causes storage for the variable to be allocated.
The second is the  referencing declaration or, simply, a  declaration. 
It does not cause storage to be allocated because it refers to an existing variable. 
A referencing declaration uses the keyword  extern and does not provide initialization.
Otherwise, a declaration is a definition and causes storage to be allocated: 
double up;             // definition, up is 0 
extern int blem;       // blem defined elsewhere 
extern char gr = 'z';  // definition because initialized 
But every other file using the variable needs to declare that variable using the keyword  extern

What if you define an external variable and then declare a variable by the same name inside a function?  
The second declaration is interpreted as a definition for an automatic variable.
you can use C++’s scope-resolution operator to access an otherwise hidden external variable.
C++ goes a step beyond C by offering the  scope-resolution operator (::).
When it is prefixed to the name of a variable, this operator means to use the global version of that variable.
Thus, local() displays  warming as 0.8,but  it  displays  ::warming as 0.4.

Global Versus Local Variables 
Most often, you should use local variables and pass data to functions on a need-to-know basis rather than make data available indiscriminately by  using  global  variables.  
As  you  will  see, OOP takes this data isolation a step further. 
Global variables do have their uses, however.
For example, you might have a block of data that’s to be used by several functions, 
such as an array of month names or the atomic weights  of  the  elements.  
The  external  storage  class  is  particularly  suited  to  representing constant data because you can use the keyword  const to protect the data from change: 
const char * const months[12] = 
{ 
"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"
}; 
In this example, the first  const protects the strings from change, 
and the second  const makes sure that each pointer in the array remains pointing to the same string to which it pointed initially.

 Static Duration, Internal Linkage 
 a variable with internal linkage is local to the file that contains it. 
 But a regular external variable has external linkage
 What if you want to use the same name to denote different variables in different files? Can you just omit the  extern?
 // file1 
 int errors = 20;        // external declaration 
 ...
 --------------------------------------------
 // file2 
 int errors = 5;        // ??known to file2 only?? 
 void froobish() 
 { 
   cout << errors;   // fails 
   ... 
   No,this attempt fails because it violates the one definition rule.
 The  file2 definition attempts to create an external variable, so the program winds up with two definitions of errors,which is an error. 
 But if a file declares a static external variable that has the same name as an ordinary external variable declared in another file, the static version is the one in scope for that file: 
 // file1 
 int errors = 20;        // external declaration 
 ...
 --------------------------------------------
 // file2 
 static int errors = 5;  // known to file2 only 
 void froobish() 
 { 
 cout << errors;   // uses errors defined in file2
 ... 
 This doesn’t violate the one definition rule because the keyword  static establishes that the identifier  errors has internal linkage, 
 so no attempt is made to bring in an external definition. 
 Note In a multifile program, you can define an external variable in one and only one file.
 All other files using that variable have to declare that variable with the  extern keyword
 
 Static Storage Duration, No Linkage 
 You create such a variable by applying the  static modifier to a variable defined inside a block.
 When you use it inside a block, static causes a local variable  to  have  static  storage  duration.
 This  means  that  even  though  the  variable  is  known within that block, it exists even while the block is inactive.
Also if you initialize a static local variable, the program initializes the variable once, when the program starts up. 
Subsequent calls to the function don’t reinitialize the variable  the  way  they  do  for  automatic  variables. 

Functions and Linkage 
C++, like C, does not allow you to define one function inside another, so all functions automatically have static storage duration, meaning they are all present as long as the program is running. 
By default, functions have external linkage, meaning they can be shared across files.
You can use the keyword  extern in a function prototype to indicate that the function is defined in another file, but  that  is  optional.
You can also use the keyword  static to give a function internal linkage, confining its use to a single file.
You would  apply  this  keyword  to  the  prototype  and  to  the  function  definition: 
static int private(double x); 
... 
static int private(double x) 
{ 
   ... 
} 
This means the function is known only in that file. 
It also means you can use the same name for another function in a different file.

a file containing a static function definition will use that version of the function even if there is an external definition of a function that has the same name. 
The one definition rule extends to non-inline functions, too.
Therefore, every  program shall contain exactly one definition of every non-inline function. 
For  functions  with external linkage, this means that only one file of a multifile program can contain the function definition.
However, each file that uses the function should have the function prototype.
Inline functions are excepted from this rule to allow you to place inline function definitions in a header file.
Thus, each file that includes the header file ends up having the inline function definition. 
However, C++ does require that all the inline definitions for a particular function be identical.

Where C++ Finds Functions 
Suppose you call a function in a particular file in a program. 
Where does C++ look for the function definition? 
If the function prototype in that file indicates that the function is static, 
the compiler looks only in that file for the function definition. 
Otherwise, the compiler (and the linker, too) looks in all the program files. 
If it finds two definitions, the compiler sends you an error message because you can have only one definition for an external function.
If it fails to find any definition in the files, the function then searches the libraries. 
This implies that if you define a function that has the same name as a library function, the compiler uses your version rather than the library version.
Some compiler-linkers need explicit instructions to identify which libraries to search.

Storage Schemes and Dynamic Allocation 
dynamic memory is controlled by  the  new and delete operators,not by scope and linkage rules.
Thus, dynamic memory can be allocated from one function and freed from another function. 
Typically,the compiler uses three separate memory chunks: one for static variables (this chunk might be subdivided), one for automatic variables, and one for dynamic storage. 
Although the storage scheme concepts don’t apply to dynamic memory, they do apply to automatic and static pointer variables used to keep track of dynamic memory. 
For example, suppose you have the following statement inside a function: 
float * p_fees = new float [20]; 
The 80 bytes (assuming that a  float is 4 bytes) of memory allocated by  new remains  in memory until the  delete operator frees it.
But the  p_fees pointer passes from existence when program execution exits the block containing this declaration. 
If you want to have the 80 bytes of allocated memory available to another function, you  need  to  pass  or  return its address to that function. 
On the other hand, if you declare  p_fees with external linkage, the  p_fees pointer will be available to all the functions following that declaration in the file.
And by using the following in a second file, you  make  that  same pointer available in the second file: 
extern float * p_fees;

Initialization with the  new Operator 
What if you want to initialize a variable as part of the dynamic memory allocation? 
If you wish to create and initialize storage for one of the scalar built-in types, you can do so by following the desired type  with  an  initialization  value enclosed in parentheses:
int *pi = new int (6);   // *pi set to 6 
double * pd = new double (99.99);  // *pd set to 99.99 
The parentheses syntax also can be used with classes having suitable constructors, but we  haven’t  got  that  far  yet

When new Fails It may be that  new can’t find the requested amount of memory. 
For its first decade, C++ handled that eventuality by having new return a null pointer. Currently, however, new throws a std::bad_alloc exception.

Namespaces 
Names in C++ can refer to variables, functions, structures, enumerations, classes, and class and structure members.
When programming projects grow large, the potential for name conflicts increases.
When you use class libraries from more than one source, you  can  get name conflicts. 
For  example, two libraries might both define classes named  List, Tree, and Node,but  in  incompatible  ways.
You  might  want  the  List class from one library and the Tree from the other, and each might expect its own version of  Node. 
Such conflicts are termed  namespace problems.

4 Traditional  C++  Namespaces 
A  declarative  region is a region in which declarations can be made. 
For  example, you  can  declare  a  global  variable  outside any function.
The declarative region for that variable is the file in which it is declared. 
If you  declare  a  variable  inside  a  function, its declarative region is the innermost block in which it is declared. 
A second term you need to be aware of is  potential scope.
The  potential  scope for a variable begins at its point of declaration and extends to the end of its declarative region. 
the potential scope is more limited than the declarative region because you can’t use a variable above the point where it is first defined. 
However,a variable might not be visible everywhere in its potential scope. 
For instance, it might be hidden by another variable of the same name declared in a nested declarative region. 

The portion of the program that can actually see the variable is termed the  scope, which is the way we’ve been using the term all along.

New Namespace Features C++ now adds the ability to create named namespaces by defining a new kind of declarative region, 

The names in one namespace don’t conflict with the same names declared in other namespaces, 
and there are mechanisms for letting other parts of a program use items declared in a namespace.

The following code, for example, uses the new keyword  namespace to create two namespaces, Jack and Jill: 
namespace Jack 
{ 
   double pail;                      // variable declaration 
   void fetch();                     // function prototype 
   int pal;                          // variable declaration 
   struct Well { ... };              // structure declaration 
} 

Namespaces can be located at the global level or inside other namespaces, but  they cannot be placed in a block.
Thus, a name declared in a namespace has external linkage by default (unless it refers to a constant). 
In addition to user-defined namespaces, there is one more namespace, the global namespace.
This  corresponds  to  the  file-level  declarative  region,so what used to be termed  global variables are now described as being part of the global namespace. 
The names in any one namespace don’t conflict with names in another namespace. 
Of course, you  need  a  way  to  access  names  in  a  given  namespace.
The  simplest  way  is to use  ::, the scope-resolution operator, to  qualify a name with its namespace: 
Jack::pail = 12.34;  // use a variable 
Jack::fetch();       // use a function 
An unadorned name,such as  pail,is termed the unqualified name, whereas a name with the namespace,as in  Jack::pail, is termed a  qualified name. 

using Declarations and  using Directives 
The  using declaration lets you make particular identifiers available, and the  using directive makes the entire namespace accessible. 
The using declaration involves preceding a qualified name with the keyword  
using: using Jill::fetch;    // a using declaration
A using declaration adds a particular name to the declarative region in which it occurs. 
For  example, the  using declaration of  Jill::fetch in main() adds fetch to the declarative region defined by  main(). 
After making this declaration, you  can  use  the  name fetch instead of  Jill::fetch.

Because a  using declaration adds the name to the local declarative region, this example precludes creating another local variable by the name of  fetch.
Also  like  any  other  local variable, fetch would  override  a  global  variable  by  the  same  name




