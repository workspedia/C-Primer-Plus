0 outline
(1) Procedural and object-oriented programming 
(2) The concept of classes 
(3) How to define and implement a class 
(4) Public and private class access 
(5) Class data members Class methods (also called class function members) 
(6) Creating and using class objects 
(7) Class constructors and destructors 
(8) const member functions 
(9) The this pointer Creating arrays of objects 
(10) Class scope 
(11) Abstract data types 

most important OOP features: 
Abstraction 
Encapsulation and data hiding 
Polymorphism 
nheritance 
Reusability of code

1 Procedural and object-oriented programming
with a procedural approach, you  first  concentrate  on the procedures you will follow and then think about how to represent the data. 

with an OOP approach, you concentrate on the object as the user perceives it, 
thinking about the data you need to describe the object and the operations that will describe the user’s interaction with the data.
After you develop a description of that interface, you  move  on  to  decide  how  to  implement  the  interface  and  data  storage. 
Finally,you put together a program to use your new design. 

2 Abstraction and Classes 
Life is full of complexities, and one way we cope with complexity is to frame simplifying abstractions.
You are a collection of more than an octillion atoms. 
Some students of the mind would say that your mind is a collection of several semiautonomous agents.
In computing,abstraction is the crucial step of representing information in terms of its interface with the user.
That is, you abstract the essential operational features of a problem and express a solution in those terms. 
From abstraction, it is a short step to the user-defined type, which in C++ is a class design that implements the abstract interface. 

What Is a Type? 
Let’s think a little more about what constitutes a type.
For  example, what is a nerd? 

If you subscribe to the popular stereotype, you  might  think  of  a  nerd  in  visual  terms—thick, black-rimmed  glasses, pocket protector full of pens, and so on.
After a little reflection, you might conclude that a nerd is better defined operationally—for example, in terms of how he or she responds to an awkward social situation.
You have a similar situation, if you don’t mind stretched analogies, with a procedural language such as C.
At first, you  tend  to think of a data type in terms of its appearance—how it is stored in memory.
A  char, for example, is 1 byte of memory, and a  double is often 8 bytes of memory. 
But a little reflection leads you to conclude that a data type is also defined in terms of the operations that can be performed on it.
 
In short, specifying a basic type does three things: 
It determines how much memory is needed for a data object. 
It determines how the bits in memory are interpreted. 
It determines what operations, or methods, can be performed using the data object.
For  built-in  types, the information about operations is built in to the compiler. 
But when you define a user-defined type in C++, you  have  to  provide  the  same  kind  of information yourself. 

2 Classes in C++ 
It combines data representation and methods for manipulating that data into one neat package. 
Developing a class and a program using it requires several steps. 
Rather than take them all at once, let’s break up the development into smaller stages.
Typically, C++ programmers place the interface, in the form of a class definition, in a header file 
and place the implementation, in the form of code for the class methods, in a source code file. So let’s be typical. 

Access Control 
Any program that uses an object of a particular class can access the public portions directly.
A program can access the private members of an object  only by  using  the public member functions (or via a friend function). 
Thus, the public member functions act as go-betweens between a program and an object’s private members; 
they provide the interface between object and program.
This insulation of data from direct access by a program  is  called data hiding. 

keyword public  identifies class members that constitute the public interface for the class (abstraction) 
A class design attempts to separate the public interface from the specifics of the implementation.
The public interface represents the abstraction component of the design. 
Gathering the implementation details together and separating them from the abstraction is called encapsulation. 

Data hiding (putting data into the private section of a class) is an instance of encapsulation, 
and so is hiding functional details of an implementation in the private section.
Another example of encapsulation is the usual practice of placing class function definitions in a separate file from the class declaration. 

The principle is to separate the details of the implementation from the design of the interface. 
If you later find a better way to implement the data representation or the details of the member functions, 
you  can  change those details without changing the program interface, and that makes programs much easier to maintain. 

Member Access Control: Public or Private?
You  don’t  have  to  use  the  keyword  private in class declarations because that is the default access control for class objects.

Classes and Structures 
Class descriptions look much like structure declarations with the addition of member functions and the  public and private visibility labels. 
In fact, C++ extends to structures the same features classes have. 
The only difference is that the default access type for a structure is  public, whereas the default type for a class is  private. 
 
Implementing Class Member Functions 
Member function definitions also have two special characteristics: 
When you define a member function, you  use  the  scope-resolution  operator  (::) to identify the class to which the function belongs. 
Class methods can access the  private components of the class. 
void Stock::update(double price) 
This notation means you are defining the  update() function that is a member of the Stock class. 
Not only does this identify  update() as a member function, it means you can use the same name for a member function for a different class. 
void Buffoon::update() 
Thus,the scope-resolution operator resolves the identity of the class to which a method definition applies.
We say that the identifier  update() has class  scope. 
Other member functions of the  Stock class can, if necessary, use the  update() method without using the scope-resolution operator.
That’s because they belong to the same class, making update() in scope.

Inline Methods 
Any function with a definition in the class declaration automatically becomes an inline function.
You  can, if you like, define a member function outside the class declaration and still make it inline.
To do so, you  just  use  the  inline qualifier when you define the function in the class implementation section:

The special rules for inline functions require that they be defined in each file in which they are used.
make sure that inline definitions are available to all files is to include the inline definition in the same header file

Each new object you create contains storage for its own internal variables, the class members.
But all objects of the same class share the same set of class methods, with just one copy of each method. 

kate.show() and joe.show() both invoke the same method—that is, both execute the same block of code.They just apply the code to different data. 
Calling a member function is what some OOP languages term  sending a message.
Thus,sending the same message to two different objects invokes the same method but applies it to two different objects

Using Classes 
The Client/Server Model 
OOP programmers often discuss program design in terms of a client/server model. 
In this conceptualization, the  client is a program that uses the class. 
The class declaration, including the class methods, constitute the  server, which is a resource that is available to the programs that need it.
Any changes the server designer makes to the class design should be to details of implementation, not to the interface. 

3 Class Constructors and Destructors 
Let’s talk about why they are needed and how to write them. 
One of C++’s aims is to make using class objects similar to using standard types. 
the code provided so far in this chapter doesn’t let you initialize a  Stock object the way  you  can  an  ordinary  int or struct.
Stock hot = {"Sukie’s Autos, Inc.", 200, 50.25};   // NO! compile error The reason 
you can’t initialize a  Stock object this way is because the data parts have private access status
As you’ve  seen, the only way a program can access the data members is through a member function.
Therefore, you  need  to  devise  an  appropriate  member  function  if  you’re  to  succeed in initializing an object.

The  constructor prototype and header have an interesting property:
Although the constructor has no return value, it’s not declared type  void. In fact, a constructor has no declared type.

Default Constructors 
A default constructor is a constructor that is used to create an object when you don’t provide explicit initialization values.
if you fail to provide any constructors, C++ automatically supplies a default constructor. 
It’s an implicit version  of  a  default  constructor, and it does nothing.
The fact that the default constructor has no arguments reflects the fact that no values appear in the declaration.
A curious fact about default constructors is that the compiler provides one only if you don’t define any constructors.
If you provide a nondefault constructor, and don’t provide your own version of a default constructor, then a declaration like this becomes an error: 
Stock stock1;  // not possible with current constructor 
If, however, you  wish  to  create  objects  without  explicit  initialization, you  must  define  your  own  default  constructor.
This  is  a  constructor  that  takes  no  arguments.You can define a default constructor two ways. 
One is to provide default values for all the arguments to the existing constructor: 
Stock(const string & co = "Error", int n = 0, double pr = 0.0);
The second is to use function overloading to define a second constructor, one that has no arguments: 
Stock(); 
You  can  have  only  one  default  constructor, so be sure that you don’t do both.
Thus, a user-provided default constructor typically provides implicit initialization for all member values.

Note
You may have noticed that Listing 10.6 has an extra brace at the beginning and near the end
of main(). Automatic variables such as stock1 and stock2 expire when the program exits
the block that contains their definitions. Without the extra braces, that block would be the
body of main(), so the destructors would not be called until after main() completed execution.
In a windowing environment, this would mean that the window would close before the
last two destructor calls, preventing you from seeing the last two messages. But with the
braces, the last two destructor calls occur before the return statement is reached, so the
messages are displayed.

In Listing 10.6, the statement
Stock stock1("NanoSmart", 12, 20.0);
creates a Stock object called stock1 and initializes its data members to the indicated values:
Constructor using NanoSmart called
Company: NanoSmart Shares: 12
The following statement uses another syntax to create and initialize an object called
stock2:
Stock stock2 = Stock ("Boffo Objects", 2, 2.0)

The second way is to allow the call to the constructor to create a temporary object that
is then copied to stock2.Then the temporary object is discarded.If the compiler uses this
option, the destructor is called for the temporary object, producing this output instead:

You can use the constructor for more than initializing a new object. For example, the
program has this statement in main():
stock1 = Stock("Nifty Foods", 10, 50.0);
The stock1 object already exists.Therefore, instead of initializing stock1, this statement
assigns new values to the object. It does so by having the constructor create a new,
temporary object and then copying the contents of the new object to stock1.

If you can set object values either through initialization or by assignment, choose initialization.
It is usually more efficient.

const Member Functions
Consider the following code snippet:
const Stock land = Stock("Kludgehorn Properties");
land.show();
With current C++, the compiler should object to the second line.Why? Because the
code for show() fails to guarantee that it won’t modify the invoking object, which,
because it is const, should not be altered.We’ve solved this kind of problem before by
declaring a function’s argument to be a const reference or a pointer to const. But there’s
a syntax problem:The show() method doesn’t have any arguments for const to qualify.
Instead, the object it uses is provided implicitly by the method invocation.What is needed
is a new syntax, one that says a function promises not to modify the invoking object.The
C++ solution is to place the const keyword after the function parentheses.That is, the
show() declaration should look like this:
void show() const; // promises not to change invoking object
Similarly, the beginning of the function definition should look like this:
void stock::show() const // promises not to change invoking object
Class functions declared and defined this way are called const member functions. Just
as you should use const references and pointers as formal function arguments whenever
appropriate, you should make class methods const whenever they don’t modify the invoking object.
We’ll follow this rule from here on out.

You can have only one destructor per class. It has no
return type (not even void), it has no arguments,and its name is the class name preceded by a tilde

4 Knowing Your Objects: The this Pointer
In general,all class methods have a this pointer set to the address of the object that invokes the method.
Indeed, total_val in topval() is just shorthand notation for this->total_val.

What you want to return, however, is not this because this is the address of the
object.You want to return the object itself,and that is symbolized by *this. (Recall that
applying the dereferencing operator * to a pointer yields the value to which the pointer
points.) Now you can complete the method definition by using *this as an alias for the
invoking object:
const Stock & Stock::topval(const Stock & s) const
{
if (s.total_val > total_val)
return s; // argument object
else
return *this; // invoking object
}

5 An Array of Objects
const int STKS = 10;
Stock stocks[STKS] = {
Stock("NanoSmart", 12.5, 20),
Stock(),
Stock("Monolithic Obelisks", 130, 3.25),
};
This initializes stocks[0] and stocks[2] using the Stock(const string & co,
long n, double pr) constructor as well as stocks[1] using the Stock() constructor.
Because this declaration only partially initializes the array, the remaining seven members
are initialized using the default constructor.

For example, the original Unix implementation used a C++ front-end
cfront that converted C++ programs to C programs.To handle method definitions,all it
had to do is convert a C++ method definition like
void Stock::show() const
{
cout << "Company: " << company
<< " Shares: " << shares << ‘\n’
<< " Share Price: $" << share_val
<< " Total Worth: $" << total_val << ‘\n’;
}
to the following C-style definition:
void show(const Stock * this)
{
cout << "Company: " << this->company
<< " Shares: " << this->shares << ‘\n’
<< " Share Price: $" << this->share_val
<< " Total Worth: $" << this->total_val << ‘\n’;
}
That is, it converted a Stock:: qualifier to a function argument that is a pointer to
Stock and then uses the pointer to access class members.
Similarly, the front end converted function calls like
top.show();
to this:
show(&top);
In this fashion, the this pointer is assigned the address of the invoking object. (The
actual details might be more involved.)

6 Class Scope
In short, within a class declaration or a member function definition you can use an
unadorned member name (the unqualified name),as when sell() calls the set_tot()
member function.A constructor name is recognized when it is called because its name is
the same as the class name. Otherwise, you must use the direct membership operator (.),
the indirect membership operator (->), or the scope-resolution operator (::), depending
on the context, when you use a class member name.The following code fragment illustrates
how identifiers with class scope can be accessed:

7 Abstract Data Types
The Stock class is pretty specific. Often, however, programmers define classes to represent
more general concepts. For example, using classes is a good way to implement what computer
scientists describe as abstract data types (ADTs).As the name suggests,an ADT
describes a data type in a general fashion without bringing in language or implementation
details.

Classes are well matched to describing ADTs.The public member function interface
provides the services described by an ADT,and the class’s private section and the code for
the class methods provide an implementation that is hidden from clients of the class.


